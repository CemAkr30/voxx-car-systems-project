/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticationRouteImport } from './routes/_authentication'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as AuthenticationLoginRouteImport } from './routes/_authentication/login'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard'
import { Route as AuthenticatedModelIndexRouteImport } from './routes/_authenticated/model/index'
import { Route as AuthenticatedMarkaIndexRouteImport } from './routes/_authenticated/marka/index'

const AuthenticationRoute = AuthenticationRouteImport.update({
  id: '/_authentication',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticationLoginRoute = AuthenticationLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthenticationRoute,
} as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedModelIndexRoute = AuthenticatedModelIndexRouteImport.update({
  id: '/model/',
  path: '/model/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedMarkaIndexRoute = AuthenticatedMarkaIndexRouteImport.update({
  id: '/marka/',
  path: '/marka/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

export interface FileRoutesByFullPath {
  '': typeof AuthenticationRouteWithChildren
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/login': typeof AuthenticationLoginRoute
  '/': typeof AuthenticatedIndexRoute
  '/marka': typeof AuthenticatedMarkaIndexRoute
  '/model': typeof AuthenticatedModelIndexRoute
}
export interface FileRoutesByTo {
  '': typeof AuthenticationRouteWithChildren
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/login': typeof AuthenticationLoginRoute
  '/': typeof AuthenticatedIndexRoute
  '/marka': typeof AuthenticatedMarkaIndexRoute
  '/model': typeof AuthenticatedModelIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_authentication': typeof AuthenticationRouteWithChildren
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_authentication/login': typeof AuthenticationLoginRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/marka/': typeof AuthenticatedMarkaIndexRoute
  '/_authenticated/model/': typeof AuthenticatedModelIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/dashboard' | '/login' | '/' | '/marka' | '/model'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/dashboard' | '/login' | '/' | '/marka' | '/model'
  id:
    | '__root__'
    | '/_authenticated'
    | '/_authentication'
    | '/_authenticated/dashboard'
    | '/_authentication/login'
    | '/_authenticated/'
    | '/_authenticated/marka/'
    | '/_authenticated/model/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  AuthenticationRoute: typeof AuthenticationRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authentication': {
      id: '/_authentication'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authentication/login': {
      id: '/_authentication/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthenticationLoginRouteImport
      parentRoute: typeof AuthenticationRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/model/': {
      id: '/_authenticated/model/'
      path: '/model'
      fullPath: '/model'
      preLoaderRoute: typeof AuthenticatedModelIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/marka/': {
      id: '/_authenticated/marka/'
      path: '/marka'
      fullPath: '/marka'
      preLoaderRoute: typeof AuthenticatedMarkaIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedMarkaIndexRoute: typeof AuthenticatedMarkaIndexRoute
  AuthenticatedModelIndexRoute: typeof AuthenticatedModelIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedMarkaIndexRoute: AuthenticatedMarkaIndexRoute,
  AuthenticatedModelIndexRoute: AuthenticatedModelIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface AuthenticationRouteChildren {
  AuthenticationLoginRoute: typeof AuthenticationLoginRoute
}

const AuthenticationRouteChildren: AuthenticationRouteChildren = {
  AuthenticationLoginRoute: AuthenticationLoginRoute,
}

const AuthenticationRouteWithChildren = AuthenticationRoute._addFileChildren(
  AuthenticationRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  AuthenticationRoute: AuthenticationRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
